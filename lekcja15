//zad z tablicy
/*
#include <iostream>

using namespace std;

class Klasa
{
    static int nextId;
    int id;
public:
    Klasa() : id(++nextId)
    {
        cout<<"Nowy obiekt o id: "<<id<<endl;
    }
    ~Klasa()
    {
        cout<<"Destruktor obiektu o id: "<<id<<endl;
    }
    int test(int arg)
    {
        cout<<"Funkcja testowa obiektu o id: "<<id<<endl;
        return arg+4;
    }
    int getId()
    {
        return id;
    }
};

int Klasa::nextId=0;

int main()
{
    Klasa *t1=new Klasa();
    cout<<t1->test(2)<<endl;
    delete t1;
    return 0;
}

//zad z tablicy 2
#include <iostream>

using namespace std;

class Klasa
{
    static int nextId;
    int id;
public:
    Klasa() : id(++nextId)
    {
        cout<<"Nowy obiekt o id: "<<id<<endl;
    }
    ~Klasa()
    {
        cout<<"Destruktor obiektu o id: "<<id<<endl;
    }
    int test(int arg)
    {
        cout<<"Funkcja testowa obiektu o id: "<<id<<endl;
        return arg+4;
    }
    int getId()
    {
        return id;
    }
};

int Klasa::nextId=0;

int main()
{
    unique_ptr<Klasa> ptr1(new Klasa);
    cout<<ptr1->test(3)<<endl;
    //nie robimy delete
    cout<<(*ptr1).test(8)<<endl;
    ptr1.reset(new Klasa);
    cout<<"KONIEC"<<endl;
    return 0;
}

//zad z tablicy 3
#include <iostream>

using namespace std;

class Klasa
{
    static int nextId;
    int id;
public:
    Klasa() : id(++nextId)
    {
        cout<<"Nowy obiekt o id: "<<id<<endl;
    }
    ~Klasa()
    {
        cout<<"Destruktor obiektu o id: "<<id<<endl;
    }
    int test(int arg)
    {
        cout<<"Funkcja testowa obiektu o id: "<<id<<endl;
        return arg+4;
    }
    int getId()
    {
        return id;
    }
};

int Klasa::nextId=0;

int main()
{
    shared_ptr<Klasa> ptr1(new Klasa);
    shared_ptr<Klasa> ptr2(ptr1);
    shared_ptr<Klasa> ptr3(ptr1);
    cout<<ptr1->test(3)<<endl;
    cout<<ptr1->test(8)<<endl;
    cout<<ptr1->test(2)<<endl;
    cout<<"KONIEC"<<endl;
    return 0;
}


              //zad z tablicy 4
              #include <iostream>

              using namespace std;

              class Klasa
              {
                  static int nextId;
                  int id;
              public:
                  Klasa() : id(++nextId)
                  {
                      cout<<"Nowy obiekt o id: "<<id<<endl;
                  }
                  ~Klasa()
                  {
                      cout<<"Destruktor obiektu o id: "<<id<<endl;
                  }
                  int test(int arg)
                  {
                      cout<<"Funkcja testowa obiektu o id: "<<id<<endl;
                      return arg+4;
                  }
                  int getId()
                  {
                      return id;
                  }
              };

              int Klasa::nextId=0;

              void ftestowa(shared_ptr<Klasa> ptrf)
              {
                  cout<<ptrf->test(2)<<endl;
              }

              int main()
              {
                  shared_ptr<Klasa> ptr1(new Klasa);
                  cout<<ptr1->test(3)<<endl;
                  ftestowa(ptr1);
                  cout<<"KONIEC"<<endl;
                  return 0;
              }


//zad z tablicy 5
#include <iostream>

using namespace std;

class Klasa
{
    static int nextId;
    int id;
public:
    Klasa() : id(++nextId)
    {
        cout<<"Nowy obiekt o id: "<<id<<endl;
    }
    ~Klasa()
    {
        cout<<"Destruktor obiektu o id: "<<id<<endl;
    }
    int test(int arg)
    {
        cout<<"Funkcja testowa obiektu o id: "<<id<<endl;
        return arg+4;
    }
    int getId()
    {
        return id;
    }
};

class KlasaUsuwajaca
{
public:
    void operator()(Klasa *wsk)
    {
        cout<<"Czyszczenie obiektu o id: "<<wsk->getId()<<endl;
        delete wsk;
    }
};

int Klasa::nextId=0;

int main()
{
    unique_ptr<Klasa, KlasaUsuwajaca> ptr(new Klasa);
    cout<<ptr->test(5)<<endl;
    cout<<"KONIEC"<<endl;
    return 0;
}
*/
